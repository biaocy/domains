#!/bin/bash

# version
domains_version="0.0.1"

# domains file
domains_file="$HOME/.domains"

# terminal color
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Make sure the domains file exists, create it if it doesn't
if [ ! -e $domains_file ]
then
	touch $domains_file
fi

is_domain() {
	local re_domain="(?=^.{4,253}$)(^(?:[a-zA-Z0-9](?:(?:[a-zA-Z0-9\-]){0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$)"
	echo "$1" | grep -qsP "$re_domain"
}

is_install() {
	command -v "$1" 2>&1 >/dev/null
}

check_via_curl() {
	local domain="$1"
	local suffix=${domain:$(expr index "$domain" '.')}

	local registry=$(echo $suffix | curl telnet://whois.iana.org:43 -s | grep whois | tr -d ' ' | cut -d':' -f2)
	local expiry=$(echo $domain | curl telnet://$registry:43 -s | grep -i expiry)
	if [ $? -ne 0 ]
	then
		echo "Error: check_via_curl"
		return 1
	fi

	expiry=${expiry:$(expr index "$expiry" ':')}

	echo "$domain|$expiry"
}

check_via_whois() {
	local domain="$1"
	local expiry=$(whois $domain | grep -i expiry)
	if [ $? -ne 0 ]
	then
		return 1
	fi

	expiry=${expiry:$(expr index "$expiry" ':')}
	echo "$domain|$expiry"
}


whois_domain() {
	local domain="$1"

	if is_install whois
	then
		check_via_whois $domain
	elif is_install curl
	then
		check_via_curl $domain
	else
		echo "Neither curl or whois is installed. Need one of them to check domain's infomation"
		return 1
	fi
}

format_domain() {
	local line="$*"
	local domain="$(echo $line | cut -d'|' -f1)"
	local expiry="$(echo $line | cut -d'|' -f2)"
	local month_diff=$(( `date +%s -d'next month'` - `date +%s` ))
	local diff=$(( `date +%s -d"$expiry"` - `date +%s` ))

	# one month may not be 30 days
	if [ $diff -gt $month_diff ]
	then
		# greater then a month
		printf "$domain	$expiry\n"
	elif [ $diff -gt 0 ]
	then
		# less then a month but do not expired
		printf "${YELLOW}$domain	$expiry${NC}\n"
	else
		# Already expired
		printf "${RED}$domain	$expiry${NC}\n"
	fi
}

add_domain() {
	local domain="$1"
	if [ -z "$domain" ] 
	then
		usage
		return 1
	else
		if ! is_domain $domain 
		then
			echo "$domain not a vaild domain"
			return 1
		fi

		local record=$(grep -s $domain $domains_file)
		if [ -z "$record" ]
		then
			echo "Checking $domain..."
			record=$(whois_domain $domain)
			if [ $? -ne 0 ] 
			then
				return 1
			fi
			echo "$record" >> $domains_file
		fi

		format_domain "$record" 
	fi
}

remove_domain() {
	local domain="$1"
	sed -i "/$domain/d" $domains_file
}

show_domain() {
	local domain="$1"

	if [ -n "$domain" ]
	then
		local record=$(grep "$domain" $domains_file)
		if [ $? -ne 0 ]
		then
			echo "Domain $domain not found"
			return 1
		else
			format_domain "$record"
		fi
	else
		while read -u 10 line
		do
			format_domain "$line"
		done 10< <(cat $domains_file | sort -t '|' -k2)
	fi
}

update_domain() {
	local domain="$1"
	if [ -z "$domain" ]
	then
		while read -u 10 line
		do
			domain=$(echo $line | cut -d'|' -f1)
			expiry=$(echo $line | cut -d'|' -f2)
			diff=$(( `date +%s -d"$expiry"` - `date +%s` ))
			
			if [ $diff -le 0 ]
			then
				#echo "Updating $domain..."
				## domain expired, update
				#record=$(whois_domain $domain)
				#if [ $? -ne 0 ] 
				#then
				#	return 1
				#fi

				## first delete domain
				#sed -i "/$domain/d" $domains_file
				## then insert domain
				#echo $record >> $domains_file
				#format_domain "$record"
				update_domain $domain
			fi
		done 10< <(cat $domains_file | sort -t '|' -k2)
	else
		local record=$(grep "$domain" $domains_file)
		if [ $? -ne 0 ]
		then
			echo "Domain $domain not found"
			return 1
		else
			echo "Updating $domain..."
			record=$(whois_domain $domain)
			if [ $? -ne 0 ] 
			then
				return 1
			fi

			# first delete domain
			sed -i "/$domain/d" $domains_file
			# then insert domain
			echo $record >> $domains_file
			format_domain "$record"
		fi
	fi
}

usage() {
	local name=$(basename $0)
	cat <<EOF
$name is a command line domain management tool.

Usage:
	$name add [domain]		Add domain
	$name rm [domain]		Remove domain
	$name show <domain>		Show domain or list all domains if no domian provided
	$name update <domain>	Force update domain or update expired domains if no domain provided

Your domains file is $domains_file.
EOF
}

version() {
	echo $domains_version
}

main() {
	local ret=0
	local cmd=""

	if [ -z "$1" ]
	then
		printf "No command specified\n\n"
		usage
		exit 1
	fi

	case "$1" in
		"add")
			cmd="add_domain"
			;;
		"rm")
			cmd="remove_domain"
			;;
		"show")
			cmd="show_domain"
			;;
		"update")
			cmd="update_domain"
			;;
		--help | -help | -h)
			cmd="usage"
			;;
		--version | -version | -v)
			cmd="version"
			;;
		*)
			printf "$1 is not a recognized command.\n\n"
			cmd="usage"
			ret=1
			;;
	esac
	shift

	$cmd "$@"
	ret=$[$ret+$?]
	exit $ret
}

main "$@"
